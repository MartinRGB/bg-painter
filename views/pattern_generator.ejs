<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
	    <script src="js/three/three.js"></script>
		<script src="js/three/loaders/GLTFLoader.js"></script>
		<script src="js/three/loaders/OBJLoader.js"></script>
		<script src="js/three/loaders/DDSLoader.js"></script>
		<script src="js/three/loaders/MTLLoader.js"></script>
		<script src="js/three/loaders/ColladaLoader.js"></script>
		<script src="js/three/loaders/FBXLoader.js"></script>
		<script src="js/three/controls/OrbitControls.js"></script>


	    <script type='text/javascript' src='js/gui/jquery-1.5.1.min.js'></script>
	    <script type='text/javascript' src='js/gui/jquery-ui-1.8.13.custom.min.js'></script>
	    <script type="text/javascript" src='js/gui/colorpicker.js'></script>
	    <script type="text/javascript" src='js/gui/controls.js'></script>
	    <script type="text/javascript" src="js/pp_general/util.js"></script>

		<script src="js/gui/dat.gui.min.js"></script>

		<!-- data -->
		<script src="data/Colors.js"></script>
		<script src="data/FeatureModels.js"></script>

	    <!-- CSS Styles //-->
	    <link href='css/smoothness/jquery-ui-1.8.13.custom.css' type='text/css' rel='stylesheet' />
	    <link rel="stylesheet" type="text/css" href="css/colorpicker.css">
		<title>fuction trial</title>
		<style type="text/css">
			* {
				margin: 0;
				padding: 0;
				font-family: sans-serif;
			}
			body {
				background-color: #111;
			}
			canvas { 
				width: 1080px;
				height: 300px;
			}

			.wrapper {
				position: relative;
				margin: 0 auto;
				width: 1200px;
			}

			#canvas2d-box {
				/*display: none;*/
				position: absolute;
				top: 0;
			}
			#textCanvas {
				display: block;
				position: relative;
				background-color: #0000ff;
				width: 256px;
				height: 128px;
				z-index: 3000;
				cursor: crosshair;
			}

			#picCanvas {
				display: block;
				position: relative;
				width: 256px;
				height: 256px;
				background-color: #0000ff;
				z-index: 3000;
			}

			#canvas_three {
				display: block;
				position: relative;
				margin: 80px auto 20px;
				width: 1080px;
				height: 300px;
			}

			.op-panel {
				position: relative;
				width: 100%;
				height: 300px;
			}
			.op-panel h3 {
				color: #fff;
			}
			.op-panel .model-options-box {

			}
			.op-group.op-buttons {
				text-align: center;
			}
			.op-panel button {
				position: relative;
				display: inline-block;
				vertical-align: top;
				width: 300px;
				height: 80px;
				border: none;
				outline: none;
				border-radius: 10px;
				font-size: 20px;
			}
			button#download {
				background-color: #f90;
			}

			button#repaint {
				background-color: #f90;
			}


			.model-option {
				display: inline-block;
				vertical-align: top;
				margin: 20px;
				width: 100px;
			}
			.model-option .desc {
				color: #fff;
			}

			#banner_stack {
				position: absolute;
				top: 0;
				left: 0;
				width: 280px;
			}
			.banner-made {
				margin: 20px;
				width: 240px;
			}

			#cover {
				display: none;
				position: absolute;
				top: 0;
				right: 0;
				width: 100%;
				height: 100%;
				background-color: rgba(  0, 0, 0, 0.8 );
				z-index: 999;
			}
			#storeimg_box {
				position: absolute;
				top: 50%;
				left: 50%;
				margin-left: -500px;
				margin-top: -200px;
				width: 1000px;

			}
			#storeimg_box img {
				width: 100%;
			}
			#storeimg_box_close {
				position: absolute;
				top: -60px;
				right: -60px;
				width: 60px;
				height: 60px;
				background-image: url(images/edit/close.png);
			}
			#storeimg_box_op {
				position: absolute;
				top: 110%;
				width: 100%;
				text-align: center;
			}
			#storeimg_box_download {
				display: inline-block;
				width: 120px;
				height: 64px;
				background-image: url(images/edit/download.png);
				cursor: pointer;
			}
		</style>

	</head>
<body onload="pageLoad()">
	<div id="cover">
		<div id="storeimg_box">
			<div id="storeimg_box_op">
				<div id="storeimg_box_download" onclick="downloadStoredImg()"></div>
			</div>
			<div id="storeimg_box_close" onclick="closeStoredImg()"></div>
			<div id="storeimg"></div>
		</div>
	</div>

	<div id="banner_stack"></div>

	<div id="canvas_three_box"></div>

	<!-- 2d canvas 用来绘制文字图层 -->
	<div id="canvas2d-box">
		<canvas id="textCanvas" width="2048" height="1024" ></canvas>
		<canvas id="picCanvas" width="1024" height="1024"></canvas>
	</div>

	<div class="op-panel">
		<div class="wrapper">
			<div class="op-group op-buttons">
				<button id="repaint" onclick="refreshBanner()">换一张</button>
				<button id="download" onclick="downloadBanner()">保存到本地</button>
			</div>
			<h3>可选模型</h3>
			<div id="model_options_box"></div>
			<h3>选用照片</h3>
			<div id="picture_box"></div>
		</div>
	</div>

	<!-- <div id="test"></div> -->

	<script type="text/javascript">
		for( var p in FeatureModelOptions ) {

			var fm = FeatureModelOptions[p];

			var img = document.createElement('IMG');
			img.src = 'models_feature/collada/' + fm.name + '.png';
			img.setAttribute('width','100%');
			var div_fm_thumb = document.createElement('DIV');
			div_fm_thumb.appendChild(img);

			var div_fm_desc = document.createElement('DIV');
			div_fm_desc.setAttribute('class','desc');
			div_fm_desc.innerHTML = fm.description;

			var div_fm_name = document.createElement('DIV');
			div_fm_name.setAttribute('class','name')
			div_fm_name.innerHTML = fm.name;

			var div_fm = document.createElement('DIV');
			div_fm.setAttribute('data-name', fm.name);
			div_fm.setAttribute('class','model-option');
			div_fm.appendChild(div_fm_thumb);
			div_fm.appendChild(div_fm_desc);
			div_fm.addEventListener('click',changeFeatureModel,false);

			model_options_box.appendChild(div_fm);

		}

		function changeFeatureModel(e) {
			var name = e.currentTarget.getAttribute('data-name');
			scene.remove(FeatureModel);
			loadFeatureModel( name );
		}


		// 假数据
		var FakeInput = {
			width 			: 1080,
			height 			: 300,
			// mainTitle 		: '小积分大优惠',
			// subTitle 		: '掌上生活会员积分活动月',
			mainTitle 		: '',
			subTitle 		: '',
			patternStyle 	: 'fill',
			businessType 	: '信贷'
		}

		// Banner 
		var Banner = {
			width 			: FakeInput.width,
			height 			: FakeInput.height,
			mainTitle 		: FakeInput.mainTitle,
			subTitle 		: FakeInput.subTitle,
			patternStyle 	: FakeInput.patternStyle,
			businessType 	: FakeInput.businessType,

			selectFeatureModel : function() {
				// this.featureModelName = randomPick( FeatureModelOptions[ this.businessType ] );
				switch (this.businessType) {
					case '推荐办卡':
						this.featureModelName = randomPick( [ 'person_01', 'person_02' ] );
						break;
					case '信贷':
						this.featureModelName = 'shield';
						break;
					case '礼品':
						this.featureModelName = 'gift_box_01';
						break;
					default:
						break;
				}
			},

			setStyle : function() {
				if( this.patternStyle == 'white' ) {
					this.bgColor = 'rgba( 255, 255, 255, 1.0 )';
					this.mainTitleColor = 'rgba( 20, 20, 20, 1.0 )';
					this.subTitleColor = 'rgba( 20, 20, 20, 0.78 )';
				}
				else if( this.patternStyle == 'fill' ) {
					this.mainTitleColor = 'rgba( 255, 255, 255, 1.0 )';
					this.subTitleColor = 'rgba( 255, 255, 255, 0.78 )';
				}
				else if( this.patternStyle == 'fancy' ) {
					this.mainTitleColor = 'rgba( 255, 255, 255, 1.0 )';
					this.subTitleColor = 'rgba( 255, 255, 255, 0.78 )';
				}
			}
		}

		Banner.selectFeatureModel();
		Banner.setStyle();

		// 2d canvas
		var ctx = textCanvas.getContext( '2d' );
		ctx.fillStyle = Banner.mainTitleColor;
		ctx.font = 'bold 120px Arial';
		ctx.fillText( Banner.mainTitle, 100, 320 );
		ctx.fillStyle = Banner.subTitleColor;
		ctx.font = '64px Arial';
		ctx.fillText( Banner.subTitle, 100, 430 );

		// Pattern - 背景图
		var Pattern = function( Banner ) {
			this.style = FakeInput.patternStyle;
			this.c_width = Banner.width;
			this.c_height = Banner.height;
			this.baseSize = Banner.height/2.5;
			this.colors = [];

			this.meshFloatings = [];
			this.meshColossal = [];
			this.meshSquad = [];
		}
		Pattern.prototype.setColors = function() {
			switch( this.style ) {
				case 'white' :
					this.colors = randomPick( Color_fancy );
					break;
				case 'fill' :
					this.colors = randomPick( Color_fill );
					break;
				case 'fancy' :
					this.colors = randomPick( Color_fancy );
					break;
				default:
					break;
			}
		}
		Pattern.prototype.setMeshes = function() {
			this.meshFloatings = [];
			this.meshColossal = [];

			// white style , no bg meshes 
			if( this.style === 'white' ) {
				return;
			}

			// floatings 
			var FloatingAmount = 30;
			var FloatingShape = randomPick( FloatingShapeOptions );
			// var FloatingShape = 'box';
			for( var i=0; i<FloatingAmount; ++i ) {
				var random_x = randomFloat( -this.c_width/2, this.c_width/2 );
				var random_y = randomFloat( -this.c_height/2, this.c_height/2 );
				var random_z = randomFloat( -500, -300 );
				var random_s = randomFloat( 0.1, 1.4 );
				var random_r = randomFloat( -1.0, 1.0 );
				// var random_c = 

				this.meshFloatings.push({
					type 	: FloatingShape,
					x		: random_x,
					y 		: random_y,
					z 		: random_z,
					scale	: random_s,
					rotate 	: random_r,
				})
			}

			// colossals
			this.meshColossal.push( 'test' );

			// squads
		};

		var pattern = new Pattern( Banner );


		// utils
		function randomPick( array ) {
			var length = array.length;
			var random = Math.floor( Math.random()*length );
			return array[random];
		}
		function randomFloat(min,max) { 
			var diff = max-min;
			return Math.random()*diff + min;
		}

		
		var renderer, scene, camera,
			ambientLight, pl_01, pl_02, spl_01, spl_02, 
			loader, FeatureModel, MeshColossal,
			material_canvas_text, mesh_textLayer,
			material_canvas_pic, mesh_picLayer,
			gui;

		// three 
		if( scene === undefined ) {
			console.log('new scene');
			scene = new THREE.Scene();
		}
		camera = new THREE.OrthographicCamera( Banner.width / - 2, Banner.width / 2, Banner.height / 2, Banner.height / - 2, 0.1, 10000 );
		camera.position.z = 500;

		// renderer
		renderer = new THREE.WebGLRenderer();
		renderer.setSize( Banner.width, Banner.height );

		renderer.domElement.setAttribute('id','canvas_three');
		canvas_three_box.appendChild( renderer.domElement );
        renderer.shadowMap.enabled;
        renderer.shadowMap.type = THREE.PCFShadowMap;

		// controls
		var controls = new THREE.OrbitControls( camera, renderer.domElement );
		controls.minDistance = 20;
		controls.maxDistance = 500;
		controls.enablePan = false;
		

		

		function changeSpotLightTarget() {
			spl_02.target = FeatureModel;
		}

		function setBgColor() {

			if( Banner.bgColor ) {

				renderer.setClearColor( Banner.bgColor );

			}
			else {

				renderer.setClearColor( '#' + pattern.colors[3] );

			}

		}

		function buildScene() {
			scene = new THREE.Scene();

			// fog
			scene.fog = new THREE.Fog( '#'+pattern.colors[3], 700, 900 );

			// LIGHTS

			// ambient light
			ambientLight = new THREE.AmbientLight( 0xe5eefc, 1.2 );
			scene.add( ambientLight );

			// point light
			pl_01 = new THREE.PointLight( '#ffffff', 2.2 );
			pl_01.position.set( -00, 200, 220 );
			pl_01.distance = 800;
	        pl_01.castShadow = true;
			// scene.add( pl_01 );

			pl_02 = new THREE.PointLight( '#ffffff', 2.2 );
			pl_02.position.set( 480, 0, 190 );
			pl_02.distance = 400;
	        pl_02.castShadow = true;
			// scene.add( pl_02 );

			// spot light
			spl_01 = new THREE.SpotLight( '#'+pattern.colors[2], 1.2 ); // 照射后方的各个物体
			spl_01.position.set( 0, 0, 40 );
			// scene.add( spl_01 );

			spl_02 = new THREE.SpotLight( '#fff', 2.0 ); // 指向物体的灯管
			spl_02.position.set( 300, 100, 500 );
			spl_02.distance = 600;
			spl_02.angle = 1.4;
			// scene.add(spl_02);


			// light 
			// scene.add( new THREE.PointLightHelper( pl_01, 10 ) );
			// scene.add( new THREE.PointLightHelper( pl_02, 10 ) );
			scene.add(new THREE.SpotLightHelper( spl_02 ));
			// scene.add( new THREE.SpotLightHelper( spl_01 ) );

			// Models Feature
			loadFeatureModel( Banner.featureModelName );

			// Meshes floatings


			for( var i = 0; i<pattern.meshFloatings.length; ++i ){
				var m = pattern.meshFloatings[i];
				var geo;
				switch( pattern.meshFloatings[i].type ) {
					case 'box':
						geo = new THREE.BoxGeometry( pattern.baseSize, pattern.baseSize, pattern.baseSize );
						break;
					case 'cone':
						geo = new THREE.ConeGeometry( pattern.baseSize, pattern.baseSize*2, 32);
						break;
					case 'sphere':
						geo = new THREE.SphereGeometry( pattern.baseSize, 32, 32);
						break;
					case 'torus':
						geo = new THREE.TorusGeometry( pattern.baseSize, pattern.baseSize/3, 32, 100);
						break;
					default:
						geo = new THREE.BoxGeometry( 10, 10, 10 );
						break;
				}
				var material = new THREE.MeshLambertMaterial( { color: '#' + pattern.colors[1]} );

				// Mesh
				var mesh = new THREE.Mesh( geo, material );	
				mesh.position.set( m.x, m.y, m.z );
				mesh.rotation.set( m.rotate, m.rotate, m.rotate );
				mesh.scale.set( m.scale, m.scale, m.scale );

				scene.add( mesh );
			}

			// Mesh Colossal
			// loader.load( 'models_colossal/colossal_02.dae', function ( collada ) {
			// 	MeshColossal = collada.scene;
			// 	MeshColossal.traverse( function ( child ) {
			// 		if ( child instanceof THREE.Mesh ) {
			// 			// model does not have normals
			// 			child.material = new THREE.MeshPhongMaterial({ 
			// 				color: '#' + pattern.colors[1]
			// 			});
			// 		}
			// 	} );
			// 	MeshColossal.position.set(  0, -200, -100 );
			// 	var modelScale = pattern.baseSize/100;
			// 	MeshColossal.scale.set( modelScale, modelScale, modelScale );
			// 	scene.add( MeshColossal );
			// } );



			// 话术文字层
			material_canvas_text = new THREE.MeshBasicMaterial({ transparent: true, color: 0xffffff, map: new THREE.Texture(textCanvas) });
			material_canvas_text.map.needsUpdate = true;
			mesh_textLayer = new THREE.Mesh( new THREE.PlaneGeometry(1080,540,4), material_canvas_text );
			mesh_textLayer.position.set( 0, -100, 10 );
			scene.add( mesh_textLayer );	


			// 添加图片
			// var img_goods = new Image();
			// img_goods.src = 'images/goods.png';
			// var ctx_p = picCanvas.getContext( '2d' );
			// img_goods.onload = function() {
				
			// 	ctx_p.drawImage( img_goods, 0, 0 );

			// 	material_canvas_pic = new THREE.MeshBasicMaterial({ transparent: true, color: 0xffffff, map: new THREE.Texture(picCanvas) });
			// 	material_canvas_pic.map.needsUpdate = true;
			// 	mesh_picLayer = new THREE.Mesh( new THREE.PlaneGeometry(540,540,4), material_canvas_pic );
			// 	mesh_picLayer.position.set( 480, -160, 0 );
			// 	scene.add( mesh_picLayer );	
			// }

		}

		function loadFeatureModel( name ) {
			console.log(name)
			loader = new THREE.ColladaLoader();
			loader.load( 'models_feature/collada/'+ name +'/model.dae', function ( collada ) {
				FeatureModel = collada.scene;
				FeatureModel.traverse( function ( child ) {
					// if ( child instanceof THREE.Mesh ) {
					// 	// model does not have normals
					// 	child.material = new THREE.MeshPhongMaterial({ 
					// 	});
					// }
				} );
				FeatureModel.position.x = 300;
				FeatureModel.position.z = 100;
				for( var i=0; i<FeatureModelOptions.length; ++i ) {
					if( name == FeatureModelOptions[i].name ) {
						var rotationx = FeatureModelOptions[i].rotate[0];
						var rotationy = FeatureModelOptions[i].rotate[1];
						var rotationz = FeatureModelOptions[i].rotate[2];
					}
				}
				// FeatureModel.rotation.z = rotationz;
				FeatureModel.rotation.y = -Math.PI/2;
				FeatureModel.rotation.x = 0.3;
				var modelScale = pattern.baseSize/100;
				FeatureModel.scale.set( modelScale, modelScale, modelScale );
				scene.add( FeatureModel );
				changeSpotLightTarget();
			} );
		}

		function pageLoad() {	

			makeBanner();

			buildGui();
		}

		function refreshBanner() {

			storeCurrentBanner();

			makeBanner();

		}

		function makeBanner() {

			pattern.setColors();
			pattern.setMeshes();

			setBgColor();

			buildScene();

		}

		function animate() {

			// splhelper_02.update();
			requestAnimationFrame( animate );
			renderer.render( scene, camera );

		}
		animate();

		function buildGui() {

			gui = new dat.GUI();

			var params = {
				'color 0': '#' + pattern.colors[0],
				'color 1': '#' + pattern.colors[1],
				'color 2': '#' + pattern.colors[2],
				'color 3': '#' + pattern.colors[3],
				'ambientColor': ambientLight.color.getHex(),
				'pointLight-1': pl_01.color.getHex(),
				'pointLight-2': pl_02.color.getHex(),
				'spl-01': spl_01.color.getHex(),
			}

			gui.addColor( params, 'color 0').onChange( function(val) {	} );
			gui.addColor( params, 'color 1').onChange( function(val) {	} );
			gui.addColor( params, 'color 2').onChange( function(val) {	} );
			gui.addColor( params, 'color 3').onChange( function(val) {	} );

			var f1 = gui.addFolder('lights');

			f1.addColor( params, 'ambientColor' ).onChange( function ( val ) {

				ambientLight.color.setHex( val );

			} );

			f1.addColor( params, 'pointLight-1' ).onChange( function ( val ) {

				pl_01.color.setHex( val );

			} );

			f1.addColor( params, 'pointLight-2' ).onChange( function ( val ) {

				pl_02.color.setHex( val );

			} );

			f1.addColor( params, 'spl-01' ).onChange(function(val){
				spl_01.color.setHex( val );
			});

			f1.open();
			gui.open();

		}

		function downloadBanner() {
			var imageData = canvas_three.toDataURL("image/png").replace("image/png", "image/octet-stream"); //Convert image to 'octet-stream' (Just a download, really)
			// window.location.href = imageData;

		    var save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
		    save_link.href = imageData;
		    save_link.download = 'frank.png'; 
		   
		    var event = document.createEvent('MouseEvents');
		    event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		    save_link.dispatchEvent(event);

		}

		function storeCurrentBanner() {	

			var img = document.createElement('IMG');
			img.src = canvas_three.toDataURL('image/png');
			img.setAttribute('width','100%');
			img.id = 'banner_' + (new Date()).getTime();

			var div  = document.createElement('DIV');
			div.setAttribute('class','banner-made');
			div.setAttribute('data-id', img.id);
			div.appendChild(img);
			div.addEventListener('click',showStoredImage,false);

			banner_stack.appendChild(div);

		}

		function showStoredImage(e) {
			var imgSelected = document.getElementById( e.currentTarget.getAttribute('data-id') ); 
			var imgShow = document.createElement('IMG');
			imgShow.src = imgSelected.src;

			cover.style.display = 'block';
			storeimg.appendChild(imgShow);
		}

		function downloadStoredImg() {
			var save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
		    save_link.href = storeimg.childNodes[0].src;
		    save_link.download = 'frank.png'; 
		   
		    var event = document.createEvent('MouseEvents');
		    event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		    save_link.dispatchEvent(event);
		}

		function closeStoredImg() {
			storeimg.removeChild(storeimg.childNodes[0]);
			cover.style.display = 'none';
		}
	</script>
</body>
</html>