<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
	    <script src="js/three/three.js"></script>
		<script src="js/three/loaders/GLTFLoader.js"></script>
		<script src="js/three/loaders/OBJLoader.js"></script>
		<script src="js/three/loaders/DDSLoader.js"></script>
		<script src="js/three/loaders/MTLLoader.js"></script>
		<script src="js/three/loaders/ColladaLoader.js"></script>
		<script src="js/three/controls/OrbitControls.js"></script>

		<script src="js/js/effects/OutlineEffect.js"></script>
		<title>Function::Render Model</title>
		<style type="text/css">
			* {
				margin: 0;
				padding: 0;
			}
			body {
				background-color: #fff;
			}
			canvas { 
				width: 1080px;
				height: 300px;
			}

			#drawingcanvas {
				position: absolute;
				background-color: #0000ff;
				top: 0px;
				right: 0px;
				width: 128px;
				height: 128px;
				z-index: 3000;
				cursor: crosshair;
			}

			#canvas_three {
				display: block;
				position: relative;
				margin: 40px auto;
				width: 1080px;
				height: 300px;
			}

			#button {
				position: absolute;
				bottom: 0;
				left: 0;
				width: 200px;
				height: 30px;
				background-color: #f90;
			}
		</style>

	</head>
<body>
	<div id="button" onclick="saveImage()"></div>
	<script type="text/javascript">

		// three 
		var scene = new THREE.Scene();
		var camera = new THREE.OrthographicCamera( 1080 / - 2, 1080 / 2, 300 / 2, 300 / - 2, 0.1, 10000 );
		// var camera = new THREE.PerspectiveCamera( 23, 1080 / 300, 10, 10000 );
		// camera.position.x = 400;
		// camera.position.y = 400;
		camera.position.z = 1000;

		// controls
		controls = new THREE.OrbitControls( camera );
		controls.target.set( 0, -0.2, -0.2 );
		controls.update();

		var color = 0x909090;

		var renderer = new THREE.WebGLRenderer({ 
			antialias:true
		});
		renderer.setSize( 1080, 300 );
		renderer.setClearColor( 0x0066ff );
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;
		renderer.domElement.setAttribute('id','canvas_three');
		document.body.appendChild( renderer.domElement );

		var geometry = new THREE.CylinderGeometry( 120, 120, 10, 128 );
		var material = new THREE.MeshPhongMaterial();
		var floor = new THREE.Mesh( geometry, material );
		floor.rotation.x = Math.PI/2;
		floor.position.set( 0, 0, -120 );
		floor.receiveShadow = true;
		scene.add(floor);

		var ambientLight = new THREE.AmbientLight( 0xffffff, 0.7 );
		scene.add( ambientLight );

		spotLight = new THREE.SpotLight( 0xffffff, 0.8 );
		spotLight.name = 'Spot Light';
		spotLight.angle = Math.PI / 5;
		spotLight.penumbra = 0.3;
		spotLight.position.set( -120, 80, 285 );
		spotLight.castShadow = true;
		spotLight.shadow.radius = 0.2;
        spotLight.shadow.mapSize.height=2048;
        spotLight.shadow.mapSize.width=2048;
		scene.add( spotLight );

		var dirLight = new THREE.DirectionalLight( 0xffffff, 0.7 );
		dirLight.name = 'Dir. Light';
		dirLight.position.set( 300, 100, 90 );
		dirLight.castShadow = true;
		scene.add( dirLight );

		// scene.add(new THREE.SpotLightHelper( spotLight ));
		// scene.add(new THREE.DirectionalLightHelper( dirLight, 50 ));


		var sphereGeo = new THREE.SphereGeometry( 20, 10, 10 );
		var sphereMat = new THREE.MeshPhongMaterial({ 
			color: 0xff0000,
			shininess: 150,
			specular: 0x222222
		});	
		var sphere = new THREE.Mesh( sphereGeo, sphereMat );
		sphere.position.set( 0, -50, 0);
		sphere.castShadow = true;
		// scene.add(sphere);

		// var helper = new THREE.CameraHelper( spl_02.shadow.camera );
		// scene.add( helper );

		// model
		// GLTF
		// var loader = new THREE.GLTFLoader();
		// loader.load( 'models/gltf/moneybag/scene.gltf', function ( gltf ) {
		// 	scene.add( gltf.scene );
		// } );

		// JSON
		// var loader = new THREE.JSONLoader();
		// 	loader.load( 'models/json/monster/monster.js', function ( geometry, materials ) {

		// 		var material = materials[ 0 ];
		// 		material.morphTargets = true;
		// 		material.color.setHex( 0xffaaaa );

		// 		for ( var i = 0; i < 1; i ++ ) {

		// 			var mesh = new THREE.Mesh( geometry, materials );

		// 			mesh.position.set( 0, 0, 0 );

		// 			var s = 0.1;

		// 			mesh.scale.set( s, s, s );

		// 			mesh.rotation.y = THREE.Math.randFloat( -0.25, 0.25 );

		// 			mesh.matrixAutoUpdate = false;
		// 			mesh.updateMatrix();

		// 			scene.add( mesh );
		// 		}

		// 	} );

		// OBJ
		// THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );
		// var mtlLoader = new THREE.MTLLoader();
		// mtlLoader.setPath( 'models/obj/male02/' );
		// mtlLoader.load( 'male02_dds.mtl', function( materials ) {

		// 	materials.preload();

		// 	var objLoader = new THREE.OBJLoader();
		// 	objLoader.setMaterials( materials );
		// 	objLoader.setPath( 'models/obj/male02/' );
		// 	objLoader.load( 'male02.obj', function ( object ) {
		// 		object.position.y = -130;
		// 		object.position.x = 195;
		// 		object.scale.set( 1.4, 1.4, 1.4 );
		// 		scene.add( object );
		// 	});
		// });

		// Collada
		var elf;
		// var loadingManager = new THREE.LoadingManager( function() {
		// 	scene.add( elf );
		// } );

		var loader = new THREE.ColladaLoader();
		loader.load( 'models_feature/collada/chest/model.dae', function ( collada ) {
			elf = collada.scene;

			// elf.traverse( function ( child ) {

			// 	if ( child instanceof THREE.Mesh ) {

			// 		if( child.material instanceof Array ) {
			// 			for( var m in child.material ) {
			// 			}
			// 		}
			// 		var tempColor = child.material.color;


			// 		// model does not have normals
			// 		child.material = new THREE.MeshPhongMaterial({
			// 			color: tempColor,
			// 			shininess: 150,
			// 			specular: 0xffffff,
			// 		});
			// 		child.castShadow = true;
			// 		child.receiveShadow = true;

			// 	}

			// } );

			elf.rotation.x = 0.3;
			elf.rotation.y = -Math.PI/2 + 0.3;
			elf.scale.set( 1, 1, 1.0 );
			scene.add( elf );
		} );

		var effect = new THREE.OutlineEffect( renderer );

		function animate() {
			requestAnimationFrame( animate );
			// renderer.render( scene, camera );
			effect.render( scene, camera );
		}
		animate();


		function saveImage() {	
			var img = canvas_three.toDataURL('image/png');
			document.write('<img src="'+img+'"/>');
		}
	</script>
</body>
</html>