<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">

    <script type='text/javascript' src='js/gui/jquery-1.5.1.min.js'></script>
    <script type='text/javascript' src='js/gui/jquery-ui-1.8.13.custom.min.js'></script>
    <script type="text/javascript" src='js/gui/colorpicker.js'></script>

    <script type='text/javascript' src='js/math/gl-matrix-min.js'></script>

    <script type='text/javascript' src='js/webgl/Axis.js'></script>
    <script type='text/javascript' src='js/webgl/Camera.js'></script>
    <script type='text/javascript' src='js/webgl/CameraInteractor.js'></script>
    <script type='text/javascript' src='js/webgl/Floor.js'></script>
    <script type='text/javascript' src='js/webgl/Globals.js'></script>
    <script type='text/javascript' src='js/webgl/Program.js'></script>
    <script type='text/javascript' src='js/webgl/Scene.js'></script>
    <script type='text/javascript' src='js/webgl/SceneTransforms.js'></script>
    <script type='text/javascript' src='js/webgl/Texture.js'></script>
    <script type='text/javascript' src='js/webgl/Utils.js'></script>
    <script type='text/javascript' src='js/webgl/WebGLApp.js'></script>
    <script type='text/javascript' src='js/webgl/Picker.js'></script>

    <script type="text/javascript" src="data/ColorSchemes.js"></script>
    <script type="text/javascript" src="data/LibModels.js"></script>

    <script type="text/javascript" src="js/objects/Pattern.js"></script>
    <script type="text/javascript" src="js/objects/util.js"></script>
    <script type="text/javascript" src="js/objects/Object3D.js"></script>
    <script type="text/javascript" src="js/objects/Bgplane.js"></script>
    <script type="text/javascript" src="js/objects/Cube.js"></script>
    <script type="text/javascript" src="js/objects/Sphere.js"></script>
    <script type="text/javascript" src="js/objects/Cone.js"></script>
    <script type="text/javascript" src="js/objects/TextureCube.js"></script>
    <script type="text/javascript" src="js/objects/Monkey.js"></script>

    <!-- CSS Styles //-->
    <link href='css/smoothness/jquery-ui-1.8.13.custom.css' type='text/css' rel='stylesheet' />
    <link rel="stylesheet" type="text/css" href="css/colorpicker.css">
    <link rel="stylesheet" type="text/css" href="css/common.css">
    <title>Pattern Painter</title>
</head>

<body onload="runWebGLApp(1)">
    <header class="header">
        <div class="topbar"></div>
        <div class="wrapper">
            <a href="http://localhost:3000/">
                <div class="logo"></div>
            </a>
            <div class="logo-text"><span style="font-weight: 200; font-style: italic;">Pattern</span>Painter</div>
        </div>
    </header>
    <div class="canvas-wrapper">
        <canvas id="canvas3d"></canvas>
    </div>
    <div class="wrapper">
        <div class="op">
            <div class="op-model">
                <h4>原始输入数据</h4>
                <h6>Origin Pattern</h6>
                <div class="op-input-text">
                    <label>Width</label>
                    <input type="text" name="" value="<%= init_width %>" id="init_width">
                </div>
                <div class="op-input-text">
                    <label>Height</label>
                    <input type="text" name="" value="<%= init_height %>" id="init_height">
                </div>
                <div class="op-input-text">
                    <label>Regular</label>
                    <input type="text" name="" value="<%= init_regular %>" id="init_regular">
                </div>
                <div class="op-input-text">
                    <label>Volume</label>
                    <input type="text" name="" value="<%= init_volume %>" id="init_volume">
                </div>
                <div class="op-input-button" id="op_repaint_pattern">Repaint by new Pattern</div>
                <div class="op-slider hidden">
                    <div class="op-slider-title">Vertex Color Weight : <span id="vertex-color-weight"></span></div>
                    <div id="slider-vertex-color-weight"></div>
                </div>
                <div class="op-slider">
                    <div class="op-slider-title">Light Position X : <span id="light-x"></span></div>
                    <div id="slider-light-x"></div>
                </div>
                <div class="op-slider">
                    <div class="op-slider-title">Light Position Y</div>
                    <div id="slider-light-y"></div>
                </div>
                <div class="op-slider">
                    <div class="op-slider-title">Light Position Z</div>
                    <div id="slider-light-z"></div>
                </div>
            </div>

            <div class="op-model">
                <h4>色彩数据</h4>
                <h6>Color Info</h6>
                <div class="canvas2d-wrapper">
                    <canvas id="canvas2d"></canvas>
                </div>
                <div class="">
                    <div class="op-color-item" id="colorSelector00"></div>
                    <div class="op-color-item" id="colorSelector01"></div>
                    <div class="op-color-item" id="colorSelector02"></div>
                    <div class="op-color-item" id="colorSelector03"></div>
                    <div class="op-color-item" id="colorSelector04"></div>
                </div>
                <div id="op_paint_data"></div>
                <div class="op-input-button" id="op_repaint_color">Repaint by new Color</div>
            </div>

            <div class="op-model">
                <h4>Modify</h4>
                <!-- <div class="op-input-button" id="op_repaint_all">Repaint All</div> -->
                <input type="file" name="" id="file">
                <div class="op-input-button" id="op_save">UPLOAD DATA</div>
                <div class="op-input-button-feedback">Uploaded !</div>
            </div>
        </div>
    </div>

    <script type="x-shader/x-vertex" id="shader-vs">
        // geometry
        attribute vec3 aVertexPosition;
        attribute vec3 aVertexNormal;
        attribute vec4 aVertexColor;
        attribute vec2 aVertexTextureCoords;

        uniform vec4 uMaterialDiffuse;
        uniform vec4 uMaterialAmbient;

        // matrices
        uniform mat4 uMVMatrix;
        uniform mat4 uPMatrix;
        uniform mat4 uNMatrix;

        // lights
        uniform vec3 uLightPosition;

        // textures
        uniform bool uUseTextures;

        // varyings
        varying vec3 vNormal;
        varying vec3 vLightRay;
        varying vec4 vVertexColor;
        varying vec2 vTextureCoord;

        void main(void) {
            // 材质纹理
            if( uUseTextures ) {
                vTextureCoord = aVertexTextureCoords;
            }

            // 顶点颜色 传给片段着色器
            vVertexColor = aVertexColor;

            // 计算法线 传给片段着色器
            vNormal = vec3( uNMatrix * vec4( aVertexNormal, 1.0 ));

            // 计算光线 传给片段着色器
            // transformed vertex position
            vec4 vertex = uMVMatrix * vec4( aVertexPosition, 1.0 );
            // transformed light position
            vec4 positionLight = vec4( uLightPosition, 1.0 );
            // light position 
            vLightRay = vertex.xyz - positionLight.xyz;

            // final vertex position
            gl_Position = uPMatrix * uMVMatrix * vec4( aVertexPosition, 1.0 );

        }
    </script>

    <script type="x-shader/x-fragment" id="shader-fs">
        #ifdef GL_ES
        precision highp float;
        #endif 

        // geometry
        uniform float uVertexColorWeight; // vertex color weight
        uniform vec4 uMaterialDiffuse;
        uniform vec4 uMaterialAmbient;

        // matrices
        uniform mat4 uMVMatrix;
        uniform mat4 uPMatrix;
        uniform mat4 uNMatrix;

        // lights
        uniform vec3 uLightPosition;
        uniform vec4 uLightAmbient;
        uniform vec4 uLightDiffuse;
        uniform bool uWireframe;

        // picking 
        uniform bool uOffscreen;

        // textures
        uniform bool uUseTextures;
        uniform sampler2D uSampler;

        // varyings
        varying vec3 vNormal;
        varying vec3 vLightRay;
        varying vec4 vVertexColor;
        varying vec2 vTextureCoord;


        void main(void) {
            // picking mode 
            if( uOffscreen ) { 
                gl_FragColor = uMaterialDiffuse;
                return;
            }

            vec3 L = normalize( vLightRay );
            vec3 N = normalize( vNormal );

            // lambert
            float lambertTerm = clamp( dot(N,-L), 0.0, 1.0 );

            // diffuse
            vec4 Id = uMaterialDiffuse*(1.0-lambertTerm) + uLightDiffuse*lambertTerm;

            if( uWireframe )
            {
                gl_FragColor = vVertexColor;
            }
            else if( uUseTextures )
            {
                gl_FragColor = texture2D( uSampler, vTextureCoord );
            }
            else
            {
                gl_FragColor = vec4( vec3(Id*(1.0-uVertexColorWeight) + vVertexColor*(uVertexColorWeight)), 1.0 );
            }
        }
    </script>

    <script type="text/javascript">
        // var Pattern;
        // $.getJSON('pattern.json',function(json){
        //  Pattern = json.Pattern;
        //  setUIControls();
        //  runWebGLApp();
        // });
        var c_width = 0;
        var c_height = 0;
        var amount = 4;
        var regular = 1;
        var volume = 1;
        var camera          = null,
            interactor      = null,
            picker          = null,
            transforms      = null,
            texture         = null,
            bObjectsPicking = false,
            bUsingTexture   = true;

        var bShowingUploaded = false;

        var ctx = canvas2d.getContext('2d');

        function configure() {
            gl.clearColor(Pattern.colorsDeci[4][0],
                Pattern.colorsDeci[4][1],
                Pattern.colorsDeci[4][2],
                Pattern.colorsDeci[4][3]);
            //Enabling depth testing
            gl.clearDepth(1.0);
            gl.enable(gl.DEPTH_TEST);
            gl.depthFunc(gl.LESS);
            //Enabling alpha blending
            gl.enable(gl.BLEND);
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

            //Creates and sets up the camera location
            camera = new Camera(CAMERA_ORBITING_TYPE);
            camera.goHome([0, 0, 240]);
            camera.setFocus([0.0, 0.0, 0.0]);
            camera.setAzimuth(0);
            camera.setElevation(0);
            camera.hookRenderer = render;

            //Scene Transforms
            transforms = new SceneTransforms(camera);

            //init transforms
            transforms.init();

            var attributeList = [
                "aVertexPosition",
                "aVertexNormal",
                "aVertexColor",
                "aVertexTextureCoords"
            ];

            var uniformList = [
                "uPMatrix",
                "uMVMatrix",
                "uNMatrix",

                "uMaterialDiffuse",
                "uMaterialAmbient",
                "uMaterialSpecular",

                "uLightAmbient",
                "uLightDiffuse",
                "uLightPosition",

                "uVertexColorWeight",

                "uWireframe",

                "uOffscreen",
                "uSampler",
                "uUseTextures"
            ];

            Program.load(attributeList, uniformList);

            gl.uniform3fv(Program.uLightPosition, [500, 200, -500]);
            gl.uniform4fv(Program.uLightDiffuse, Pattern.colorsDeci[4]); // color 4: light

            texture = gl.createTexture();
            gl.bindTexture( gl.TEXTURE_2D, texture );
            gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255,0,0,255]));
            var image = new Image();
            image.src = 'images/textures/texture01.png';
            image.onload = function() {
                gl.bindTexture( gl.TEXTURE_2D, texture );
                gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image );
                gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR );
                gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR );
                gl.bindTexture( gl.TEXTURE_2D, null );
            }
        }

        function load() {
            // 背景层1： 四边形
            var bgplane = new Bgplane({
                width: Pattern.c_width,
                height: Pattern.c_height,
                colors: Pattern.colorsDeci,
                diffuse: [0.5,0.5,0.5,1],
                VertexColorWeight: 1.0,
            });
            Scene.addObject(bgplane);

            // basic objects
            for (var i = 0; i < Pattern.basic_obj_pick.length; ++i) {
                var param = {
                    width: Pattern.sizeList[i],
                    height: Pattern.sizeList[i],
                    depth: Pattern.sizeList[i],
                    position: Pattern.positionList[i],
                    rotation: Pattern.rotationList[i],
                    scale: Pattern.scaleList[i],
                    colors: Pattern.colorsDeci,
                    diffuse: Pattern.colorsDeci[i % 4]
                }
                switch (Pattern.basic_obj_pick[i]) {
                    case 'Cube':
                        var obj = new Cube(param);
                        break;
                    case 'Sphere':
                        var obj = new Sphere(param);
                        break;
                    case 'Cone':
                        var obj = new Cone(param);
                        break;
                    default:
                        var obj = new Cube(param);
                        break;
                }
                Scene.addObject(obj)
            }

            // lib objects
            // for( var i=0; i<Pattern.lib_obj_pick.length; ++i ) {
            //     var param = {
            //         width: Pattern.sizeList[i],
            //         height: Pattern.sizeList[i],
            //         depth: Pattern.sizeList[i],
            //         position: Pattern.positionList[i],
            //         rotation: Pattern.rotationList[i],
            //         scale: Pattern.scaleList[i],
            //         colors: Pattern.colorsDeci,
            //         diffuse: Pattern.colorsDeci[i % 4]                    
            //     }
            //     Scene.loadObjectJson('multi');
            // }

            // TEXTURE CUBE
            var texturecube = new TextureCube({
                width: 200,
                height: 200,
                depth: 200,
                position: [0,0,0],
                rotation: [0,0,0],
                scale: [100,100,100],
                colors: Pattern.colorsDeci,
                diffuse: Pattern.colorsDeci[0 % 4]
            });
            Scene.addObject(texturecube);
        }

        function render() {
            // off-screen rendering
            // gl.bindFramebuffer(gl.FRAMEBUFFER, picker.framebuffer);
            // gl.uniform1i(Program.uOffscreen, true);
            // draw();

            // on-screen rendering
            gl.uniform1i(Program.uOffscreen, bObjectsPicking);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            draw();
        }

        function draw() {
            gl.viewport(0, 0, c_width, c_height);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            transforms.updateOrtho();

            try {

                var offscreen = Program.getUniform(Program.uOffscreen);

                for (var i = 0, max = Scene.objects.length; i < max; ++i) {
                    var object = Scene.objects[i];

                    // transform respective objects
                    transforms.calculateModelView();
                    transforms.push();
                    if (object.position) {
                        mat4.translate(transforms.mvMatrix, object.position);
                    }
                    if (object.rotation) {
                        mat4.rotate(transforms.mvMatrix, object.rotation[0], [1, 0, 0]);
                        mat4.rotate(transforms.mvMatrix, object.rotation[1], [0, 1, 0]);
                        mat4.rotate(transforms.mvMatrix, object.rotation[2], [0, 0, 1]);
                    }
                    if (object.scale) {
                        mat4.scale(transforms.mvMatrix, object.scale);
                    }
                    transforms.setMatrixUniforms();
                    transforms.pop();

                    // setting uniforms
                    gl.uniform4fv(Program.uMaterialDiffuse, object.diffuse);
                    gl.uniform4fv(Program.uMaterialAmbient, object.ambient);
                    gl.uniform1i(Program.uWireframe, object.wireframe);
                    gl.uniform1i(Program.uUseTextures, false);

                    // setting attributes
                    gl.enableVertexAttribArray(Program.aVertexPosition);
                    gl.disableVertexAttribArray(Program.aVertexNormal);
                    gl.disableVertexAttribArray(Program.aVertexColor);
                    gl.disableVertexAttribArray( Program.aVertexTextureCoords );


                    // vertices
                    gl.bindBuffer(gl.ARRAY_BUFFER, object.vbo);
                    gl.vertexAttribPointer(Program.aVertexPosition, 3, gl.FLOAT, false, 0, 0);
                    gl.enableVertexAttribArray(Program.aVertexPosition);

                    
                    if (!offscreen && !bObjectsPicking) {
                        // 使用顶点颜色与灯光混合的方式 
                        gl.uniform1f(Program.uVertexColorWeight, object.VertexColorWeight);
                        gl.bindBuffer(gl.ARRAY_BUFFER, object.cbo);
                        gl.vertexAttribPointer(Program.aVertexColor, 4, gl.FLOAT, false, 0, 0);
                        gl.enableVertexAttribArray(Program.aVertexColor);

                        // texture 使用材质
                        if( object.texture_coords && bUsingTexture ) {
                            gl.enableVertexAttribArray( Program.aVertexTextureCoords );
                            gl.uniform1i( Program.uUseTextures, true );
                            gl.bindBuffer( gl.ARRAY_BUFFER, object.tbo );
                            gl.vertexAttribPointer( Program.aVertexTextureCoords, 2, gl.FLOAT, false, 0, 0 );
                            
                            gl.activeTexture( gl.TEXTURE0 );
                            gl.bindTexture( gl.TEXTURE_2D, texture );
                            gl.uniform1i( Program.uSampler, 0 );
                        }

                    }else{
                        gl.uniform1i(Program.uUseTextures,false);
                    }

                    // normals
                    if (!object.wireframe) {
                        gl.bindBuffer(gl.ARRAY_BUFFER, object.nbo);
                        gl.vertexAttribPointer(Program.aVertexNormal, 3, gl.FLOAT, false, 0, 0);
                        gl.enableVertexAttribArray(Program.aVertexNormal);
                    }

                    // indices to draw
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.ibo);

                    if (object.wireframe) {
                        gl.drawElements(gl.LINES, object.indices.length, gl.UNSIGNED_SHORT, 0);
                    } else {
                        gl.drawElements(gl.TRIANGLES, object.indices.length, gl.UNSIGNED_SHORT, 0);
                    }

                    // unbind
                    gl.bindBuffer(gl.ARRAY_BUFFER, null);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

                }
            } catch (err) {
                alert(err);
            }
        }


        // APP
        var app = null;

        function runWebGLApp(bResetPattern) {
            if(bResetPattern){
                c_width = $('#init_width').val();
                c_height = $('#init_height').val();
                regular = $('#init_regular').val();
                volume = $('#init_volume').val();
                Pattern.generateData(c_width, c_height, amount, regular, volume);
                Pattern.initColor(ColorSchemes);   
            }

            app = new WebGLApp("canvas3d");

            app.configureGLHook = configure;
            app.loadSceneHook = load;
            app.drawSceneHook = render;

            app.run();

            setCanvasDimension(c_width, c_height);
            setInteractor('canvas3d');
            setUIControls();
        }
        // REPAINT
        // repaint with new data
        $('#op_repaint_pattern').click(function() {
            Scene.objects = [];
            app = null;
            runWebGLApp(1);
        });
        // repaint with new color
        $('#op_repaint_color').click(function() {
            Scene.objects = [];
            app = null;
            runWebGLApp(0);
        });













        // SAVE
        $('#op_save').click(function() {

            if( !bShowingUploaded ) {
                bShowingUploaded = true;
                $('.op-input-button-feedback').show();
            }

            var canvas3d = document.getElementById('canvas3d');
            var imageData = canvas3d.toDataURL("image/png");
            // var filename = 'Pattern_' + (new Date()).getTime() + '.' + 'png';
            // var save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
            // save_link.href = imageData;
            // save_link.download = filename;

            // var event = document.createEvent('MouseEvents');
            // event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            // save_link.dispatchEvent(event);

            var _id = new Date().getTime();

            var arr     = imageData.split(','),
                mime    = arr[0].match(/:(.*?);/)[1],
                bstr    = atob(arr[1]),
                n       = bstr.length,
                u8arr   = new Uint8Array(n);
            while(n--){
                u8arr[n] = bstr.charCodeAt(n);
            }
            var obj     = new Blob([u8arr],{type:mime});
            var fd      = new FormData();
            fd.append('file', obj, _id + '.png');

            $.ajax({
                url: "/upload_image",
                type: "POST",
                processData : false,
                contentType : false,
                data : fd,
                success : function(data) {
                    console.log(data);
                }
            });

            Pattern._id = _id;
            var pattern = JSON.stringify(Pattern);
            $.post('/upload_json', { data: pattern }, function(data,status){
            });
        });


        function setCanvasDimension(width, height) {
            // canvas 3d 
            $('#canvas3d').attr('width', width);
            $('#canvas3d').attr('height', height);
            $('#canvas3d').css('width', width + 'px');
            $('#canvas3d').css('height', height + 'px');
            // canvas 2d
            setSmallMapView(width, height);
        }
        function setInteractor(canvas){
            // Scene Picker
            picker = new Picker(document.getElementById('canvas3d'));
            picker.processHitsCallback  = processHits;
            picker.addHitCallback       = addHit;
            picker.removeHitCallback    = removeHit;
            picker.hitPropertyCallback  = hitProperty;
            picker.moveCallback         = movePickedObjects;     
            //Creates and sets up the mouse and keyboard interactor
            interactor = new CameraInteractor(camera, document.getElementById('canvas3d'));
            interactor.setPicker(picker);       
        }

        // Vertex Color Weight
        $('#slider-vertex-color-weight').slider({
            value: 1.0,
            min: 0.0,
            max: 1.0,
            step: 0.05,
            slide: function() {
                var w = $(this).slider('value')
                for (var i = 1; i < Scene.objects.length; ++i) {
                    Scene.objects[i].VertexColorWeight = w;
                }
                $('#vertex-color-weight').html(w);
                app.refresh();
            }
        });

        //
        $('#slider-light-x').slider({
            value: 500,
            min: -500,
            max: 500,
            step: 10,
            slide: updateLightPosition
        });
        $('#slider-light-y').slider({
            value: 200,
            min: -500,
            max: 500,
            step: 10,
            slide: updateLightPosition
        });
        $('#slider-light-z').slider({
            value: -500,
            min: -500,
            max: 500,
            step: 10,
            slide: updateLightPosition
        });

        function updateLightPosition() {
            var x = $('#slider-light-x').slider('value');
            var y = $('#slider-light-y').slider('value');
            var z = $('#slider-light-z').slider('value');

            $('#light-x').html(x);

            gl.uniform3fv(Program.uLightPosition, [x, y, z]);
            app.refresh();
        }


        function setUIControls() {

            $('.op-color-item').each(function(index, element) {
                $(this).css('background-color', '#' + deciToHex(Pattern.colorsDeci[index]));
            });

            $('#colorSelector00').ColorPicker({
                color: '#' + deciToHex(Pattern.colorsDeci[0]),
                onChange: function(hsb, hex, rgb) {
                    $('#colorSelector00').css('backgroundColor', '#' + hex);
                    Pattern.colorsDeci[0] = hexToDeci(hex);
                }
            });
            $('#colorSelector01').ColorPicker({
                color: '#' + deciToHex(Pattern.colorsDeci[1]),
                onChange: function(hsb, hex, rgb) {
                    $('#colorSelector01').css('backgroundColor', '#' + hex);
                    Pattern.colorsDeci[1] = hexToDeci(hex);
                }
            });
            $('#colorSelector02').ColorPicker({
                color: '#' + deciToHex(Pattern.colorsDeci[2]),
                onChange: function(hsb, hex, rgb) {
                    $('#colorSelector02').css('backgroundColor', '#' + hex);
                    Pattern.colorsDeci[2] = hexToDeci(hex);
                }
            });
            $('#colorSelector03').ColorPicker({
                color: '#' + deciToHex(Pattern.colorsDeci[3]),
                onChange: function(hsb, hex, rgb) {
                    $('#colorSelector03').css('backgroundColor', '#' + hex);
                    Pattern.colorsDeci[3] = hexToDeci(hex);
                }
            });
            $('#colorSelector04').ColorPicker({
                color: '#' + deciToHex(Pattern.colorsDeci[4]),
                onChange: function(hsb, hex, rgb) {
                    $('#colorSelector04').css('backgroundColor', '#' + hex);
                    Pattern.colorsDeci[4] = hexToDeci(hex);
                }
            });
        }

        function setSmallMapView(width, height) {
            var map_width = 300;
            var map_height = 300 * Pattern.c_height / Pattern.c_width;
            canvas2d.width = map_width;
            canvas2d.height = map_height;
            canvas2d.style.width = map_width + 'px';
            canvas2d.style.height = map_height + 'px';

            ctx.fillRect(0, 0, map_width, map_height);
            ctx.fillStyle = '#ff0000';
            ctx.font = '5px Arial';
            ctx.translate(map_width / 2, map_height / 2);
            ctx.scale(map_width / Pattern.c_width, map_width / Pattern.c_width);

            for (var i = 1; i < Scene.objects.length; ++i) {
                var obj = Scene.objects[i];
                ctx.fillStyle = '#' + deciToHex(obj.diffuse);
                ctx.strokeStyle = '#' + deciToHex(obj.diffuse);
                ctx.save();
                if (Scene.objects[i] instanceof Cube) {
                    ctx.translate(obj.position[0], -obj.position[1]);
                    ctx.scale(obj.scale[0], obj.scale[1]);
                    ctx.font = '100px Arial';
                    ctx.fillText(i, -30, 30);
                    ctx.lineWidth = 9;
                    ctx.strokeRect(-obj.width / 2, -obj.width / 2, obj.width, obj.width);
                }
                if (Scene.objects[i] instanceof Sphere) {
                    ctx.translate(obj.position[0], -obj.position[1]);
                    ctx.scale(obj.scale[0], obj.scale[1]);
                    ctx.beginPath();
                    ctx.arc(0, 0, obj.width / 2, 0, Math.PI * 2);
                    ctx.font = '100px Arial';
                    ctx.fillText(i, -30, 30);
                    ctx.lineWidth = 9;
                    ctx.stroke();
                    ctx.closePath();
                }
                ctx.restore();
            }
        }
    </script>
</body>

</html>